diff --git a/.idea/codeStyles/Project.xml b/.idea/codeStyles/Project.xml
new file mode 100644
index 0000000..3cdc6ae
--- /dev/null
+++ b/.idea/codeStyles/Project.xml
@@ -0,0 +1,28 @@
+<component name="ProjectCodeStyleConfiguration">
+  <code_scheme name="Project" version="173">
+    <DBN-PSQL>
+      <case-options enabled="true">
+        <option name="KEYWORD_CASE" value="lower" />
+        <option name="FUNCTION_CASE" value="lower" />
+        <option name="PARAMETER_CASE" value="lower" />
+        <option name="DATATYPE_CASE" value="lower" />
+        <option name="OBJECT_CASE" value="preserve" />
+      </case-options>
+      <formatting-settings enabled="false" />
+    </DBN-PSQL>
+    <DBN-SQL>
+      <case-options enabled="true">
+        <option name="KEYWORD_CASE" value="lower" />
+        <option name="FUNCTION_CASE" value="lower" />
+        <option name="PARAMETER_CASE" value="lower" />
+        <option name="DATATYPE_CASE" value="lower" />
+        <option name="OBJECT_CASE" value="preserve" />
+      </case-options>
+      <formatting-settings enabled="false">
+        <option name="STATEMENT_SPACING" value="one_line" />
+        <option name="CLAUSE_CHOP_DOWN" value="chop_down_if_statement_long" />
+        <option name="ITERATION_ELEMENTS_WRAPPING" value="chop_down_if_not_single" />
+      </formatting-settings>
+    </DBN-SQL>
+  </code_scheme>
+</component>
\ No newline at end of file
diff --git a/src/main/java/core/file/hrf/HRFStringParser.java b/src/main/java/core/file/hrf/HRFStringParser.java
index bb5c9b2..9287b51 100644
--- a/src/main/java/core/file/hrf/HRFStringParser.java
+++ b/src/main/java/core/file/hrf/HRFStringParser.java
@@ -195,8 +195,13 @@ public class HRFStringParser {
 				// Xtra
 				else if (entity.toString().equalsIgnoreCase(XTRA)) {
 					hoModel.setXtraDaten(new XtraData(properties));
-					trainerID = Integer.parseInt(properties.getProperty("trainerid", "-1")
-							.toString());
+					try {
+						trainerID = Integer.parseInt( properties.getProperty("trainerid", "-1"));
+					} catch (NumberFormatException | NullPointerException nfe) {
+						trainerID = -1;
+					}
+
+
 				} else if (entity.toString().equalsIgnoreCase(LASTLINEUP)) {
 					hoModel.setLastAufstellung(new Lineup(properties));
 				} else if (entity.toString().equalsIgnoreCase(STAFF)) {
diff --git a/src/main/java/core/model/misc/Basics.java b/src/main/java/core/model/misc/Basics.java
index 4299632..0fdf8c2 100644
--- a/src/main/java/core/model/misc/Basics.java
+++ b/src/main/java/core/model/misc/Basics.java
@@ -316,7 +316,11 @@ public final class Basics  {
     public int getTeamId() {
         return m_iTeamId;
     }
-    
+
+    public boolean isNationalTeam() {
+        return (m_iTeamId > 0 && m_iTeamId < 5000);
+    }
+
 	/**
      * Setter for property m_sTeamName.
      *
diff --git a/src/main/java/core/model/player/Spieler.java b/src/main/java/core/model/player/Spieler.java
index 2f7fa17..4a46a8f 100644
--- a/src/main/java/core/model/player/Spieler.java
+++ b/src/main/java/core/model/player/Spieler.java
@@ -306,7 +306,12 @@ public class Spieler {
             m_iTrikotnummer = Integer.parseInt(temp);
         }
 
-        m_iTransferlisted = Integer.parseInt(properties.getProperty("transferlisted", "0"));
+        // for national teams it's not a numeric
+        try {
+            m_iTransferlisted = Integer.parseInt( properties.getProperty("transferlisted", "0"));
+        } catch (NumberFormatException | NullPointerException nfe) {
+            m_iTransferlisted = 0;
+        }
         m_iLaenderspiele = Integer.parseInt(properties.getProperty("caps", "0"));
         m_iU20Laenderspiele = Integer.parseInt(properties.getProperty("capsU20", "0"));
 
diff --git a/src/main/java/core/net/MyConnector.java b/src/main/java/core/net/MyConnector.java
index ba30e04..c9aa995 100644
--- a/src/main/java/core/net/MyConnector.java
+++ b/src/main/java/core/net/MyConnector.java
@@ -64,7 +64,7 @@ public class MyConnector {
 	public static String m_sIDENTIFIER = "HO! Hattrick Organizer V" + HO.VERSION;
 	private static MyConnector m_clInstance;
 	private final static String VERSION_TRAINING = "2.1";
-	private final static String VERSION_MATCHORDERS = "2.4";
+	private final static String VERSION_MATCHORDERS = "2.1";
 	private final static String VERSION_MATCHLINEUP = "1.9";
 	private final static String VERSION_MATCHDETAILS = "2.3";
 	private final static String VERSION_PLAYERS = "2.1";
@@ -275,7 +276,7 @@ public class MyConnector {
 	 */
 	public String getMatchOrder(int matchId, MatchType matchType, int teamId) throws IOException {
 		String url = htUrl + "?file=matchorders&version=" + VERSION_MATCHORDERS + "&matchID="
-				+ matchId + "&teamId=" + teamId;
+				+ matchId;
 		url += "&sourceSystem=" + matchType.getSourceString();
 
 		return getCHPPWebFile(url);
@@ -301,9 +302,6 @@ public class MyConnector {
 		if (matchId > 0) {
 			urlpara.append("&matchID=").append(matchId);
 		}
-		if (teamId>0) {
-			urlpara.append("&teamId=").append(teamId);
-		}
 		urlpara.append("&actionType=setmatchorder");
 		urlpara.append("&sourceSystem=" + matchType.getSourceString());
 
diff --git a/src/main/java/module/nthrf/MainPanel.java b/src/main/java/module/nthrf/MainPanel.java
index d167c08..fb65716 100644
--- a/src/main/java/module/nthrf/MainPanel.java
+++ b/src/main/java/module/nthrf/MainPanel.java
@@ -1,6 +1,7 @@
 package module.nthrf;
 
 import core.model.HOVerwaltung;
+import core.util.HOLogger;
 
 import java.awt.BorderLayout;
 import java.awt.event.ActionEvent;
@@ -74,12 +75,18 @@ public class MainPanel extends JPanel implements ActionListener {
 	 */
 	private boolean download() {
 		try {
+			HOLogger.instance().error(getClass(), "TRACE: start download");
 
 			List<String[]> teams = NthrfUtil.getNtTeams();
+
+			//NthrfUtil.createNthrf(3030);
+
 			if (teams == null || teams.size() < 1 || teams.get(0)[0] == null || teams.get(0)[0].length() < 1) {
+				HOLogger.instance().error(getClass(), "TRACE: teams is empty");
 				return false;
 			}
 			final long teamId;
+			HOLogger.instance().error(getClass(), "TRACE: teams.size():" + teams.size());
 			if (teams.size() > 1) {
 				NtTeamChooser chooser = new NtTeamChooser(teams);
 				chooser.setModal(true);
diff --git a/src/main/java/module/nthrf/NtLineupParser.java b/src/main/java/module/nthrf/NtLineupParser.java
index e3777f1..5d4f1e3 100644
--- a/src/main/java/module/nthrf/NtLineupParser.java
+++ b/src/main/java/module/nthrf/NtLineupParser.java
@@ -11,7 +11,7 @@ import org.w3c.dom.Element;
 import org.w3c.dom.NodeList;
 
 class NtLineupParser {
-	private String fetchedDate;
+	/*private String fetchedDate;
 	private long matchId;
 	private int matchType;
 	private boolean isYouth;
@@ -19,7 +19,7 @@ class NtLineupParser {
 
 	private long teamId;
 	private String teamName;
-	private int xpLevel;
+	private int xpLevel;*/
 
 	private List<NtPlayerPosition> players = new ArrayList<NtPlayerPosition>(); // <NtPlayerPosition>
 	private boolean parsingSuccess;
@@ -34,7 +34,7 @@ class NtLineupParser {
 
 		tmp = (Element) ele.getElementsByTagName("PlayerID").item(0);
 		pp.setPlayerId(Long.parseLong(tmp.getFirstChild().getNodeValue()));
-		tmp = (Element) ele.getElementsByTagName("PlayerName").item(0);
+		tmp = (Element) ele.getElementsByTagName("LastName").item(0);
 		pp.setName(tmp.getFirstChild().getNodeValue());
 		tmp = (Element) ele.getElementsByTagName("RoleID").item(0);
 		int roleId = Integer.parseInt(tmp.getFirstChild().getNodeValue());
@@ -58,7 +58,8 @@ class NtLineupParser {
         }
         try {
             Element root = doc.getDocumentElement();
-            Element ele = (Element)root.getElementsByTagName("FetchedDate").item(0);
+			Element ele;
+ /*           Element ele = (Element)root.getElementsByTagName("FetchedDate").item(0);
             fetchedDate = XMLManager.getFirstChildNodeValue(ele);
             ele = (Element)root.getElementsByTagName("MatchID").item(0);
             matchId = Long.parseLong(XMLManager.getFirstChildNodeValue(ele));
@@ -68,19 +69,19 @@ class NtLineupParser {
             matchType = Integer.parseInt(XMLManager.getFirstChildNodeValue(ele));
             ele = (Element)root.getElementsByTagName("MatchDate").item(0);
             matchDate = XMLManager.getFirstChildNodeValue(ele);
-
+*/
             // skip home team
             // skip away team
             // skip arena
 
             // team
             root = (Element)root.getElementsByTagName("Team").item(0);
-            ele = (Element)root.getElementsByTagName("TeamID").item(0);
+            /*ele = (Element)root.getElementsByTagName("TeamID").item(0);
             teamId = Long.parseLong(XMLManager.getFirstChildNodeValue(ele));
             ele = (Element)root.getElementsByTagName("TeamName").item(0);
             teamName = XMLManager.getFirstChildNodeValue(ele);
             ele = (Element)root.getElementsByTagName("ExperienceLevel").item(0);
-            xpLevel = Integer.parseInt(XMLManager.getFirstChildNodeValue(ele));
+            xpLevel = Integer.parseInt(XMLManager.getFirstChildNodeValue(ele));*/
 
             // lineup players
             root = (Element)root.getElementsByTagName("Lineup").item(0);
@@ -96,16 +97,16 @@ class NtLineupParser {
         }
 	}
 
-	public String getFetchedDate() {
+	/*public String getFetchedDate() {
 		return fetchedDate;
 	}
 	public boolean isParsingSuccess() {
 		return parsingSuccess;
-	}
+	}*/
 	public List<NtPlayerPosition> getAllPlayers() {
 		return players;
 	}
-	public long getMatchId() {
+	/*public long getMatchId() {
 		return matchId;
 	}
 	public int getMatchType() {
@@ -125,17 +126,18 @@ class NtLineupParser {
 	}
 	public int getXpLevel() {
 		return xpLevel;
-	}
+	}*/
 
 	@Override
 	public String toString() {
-		StringBuffer sb = new StringBuffer("NtPlayers (from "+fetchedDate+"), parsingSuccess: " + parsingSuccess);
+		/*StringBuffer sb = new StringBuffer("NtPlayers (from "+fetchedDate+"), parsingSuccess: " + parsingSuccess);
 		sb.append("\n\tTeam: " + teamName + " (" + teamId + ")");
 		sb.append("\n\tPlayer IDs("+players.size()+"):");
 		int m = 1;
 		for (Iterator<NtPlayerPosition> i=players.iterator(); i.hasNext(); m++) {
 			sb.append("\n\t\t" + m + ". " + i.next());
 		}
-		return sb.toString();
+		return sb.toString();*/
+		return "";
 	}
 }
diff --git a/src/main/java/module/nthrf/NtPlayer.java b/src/main/java/module/nthrf/NtPlayer.java
index 1021749..6e55c91 100644
--- a/src/main/java/module/nthrf/NtPlayer.java
+++ b/src/main/java/module/nthrf/NtPlayer.java
@@ -91,8 +91,11 @@ class NtPlayer {
 	public int getTranferlisted() {
 		return tranferlisted;
 	}
-	public void setTranferlisted(int tranferlisted) {
-		this.tranferlisted = tranferlisted;
+	public void setTranferlisted(boolean tranferlisted) {
+		if (tranferlisted)
+			this.tranferlisted = 1;
+		else
+			this.tranferlisted = 0;
 	}
 	public int getCountryId() {
 		if (countryId >= 0) {
diff --git a/src/main/java/module/nthrf/NtPlayersParser.java b/src/main/java/module/nthrf/NtPlayersParser.java
index fa8897c..f299dc8 100644
--- a/src/main/java/module/nthrf/NtPlayersParser.java
+++ b/src/main/java/module/nthrf/NtPlayersParser.java
@@ -33,9 +33,15 @@ class NtPlayersParser {
 		try {
 			for (Iterator<Long> i = playerIds.iterator(); i.hasNext(); ) {
 				Long playerId = i.next();
-				String xmlData = dh.getHattrickXMLFile("/chppxml.axd?file=playerdetails&playerId=" + playerId);
-				Element ele = XMLManager.parseString(xmlData).getDocumentElement();
-				ele = (Element)ele.getElementsByTagName("Player").item(0);
+				String xmlData = dh.getHattrickXMLFile("/chppxml.axd?file=playerdetails&version=2.7&playerId=" + playerId);
+
+//				Element root = doc.getDocumentElement();
+//				NodeList  nodeList = root.getElementsByTagName("Match");
+
+				Document doc = XMLManager.parseString(xmlData);
+				Element root = doc.getDocumentElement();
+				Element ele = (Element)root.getElementsByTagName("Player").item(0);
+				//Element ele2 = (Element)root.getElementsByTagName("Playerxxx").item(0);
                 players.add(createPlayer(ele, countryMapping));
             }
 		} catch (Exception e) {
@@ -50,7 +56,7 @@ class NtPlayersParser {
 
 		tmp = (Element) ele.getElementsByTagName("PlayerID").item(0);
 		player.setPlayerId(Long.parseLong(tmp.getFirstChild().getNodeValue()));
-		tmp = (Element) ele.getElementsByTagName("PlayerName").item(0);
+		tmp = (Element) ele.getElementsByTagName("LastName").item(0);
 		player.setName(tmp.getFirstChild().getNodeValue());
 
 		try {
@@ -75,7 +81,7 @@ class NtPlayersParser {
 		tmp = (Element) ele.getElementsByTagName("Specialty").item(0);
 		player.setSpeciality(Integer.parseInt(tmp.getFirstChild().getNodeValue()));
 		tmp = (Element) ele.getElementsByTagName("TransferListed").item(0);
-		player.setTranferlisted(Integer.parseInt(tmp.getFirstChild().getNodeValue()));
+		player.setTranferlisted(tmp.getFirstChild().getNodeValue().equals("True"));
 		tmp = (Element) ele.getElementsByTagName("NativeLeagueID").item(0);
 		int nativeLeagueId = Integer.parseInt(tmp.getFirstChild().getNodeValue());
 		player.setNativeLeagueId(nativeLeagueId);
diff --git a/src/main/java/module/nthrf/NthrfConvertXml2Hrf.java b/src/main/java/module/nthrf/NthrfConvertXml2Hrf.java
index 1bb0f39..ae38643 100644
--- a/src/main/java/module/nthrf/NthrfConvertXml2Hrf.java
+++ b/src/main/java/module/nthrf/NthrfConvertXml2Hrf.java
@@ -8,7 +8,9 @@ import core.constants.player.PlayerAgreeability;
 import core.constants.player.PlayerHonesty;
 import core.constants.player.PlayerSpeciality;
 import core.file.xml.XMLManager;
+import core.file.xml.XMLMatchArchivParser;
 import core.file.xml.XMLWorldDetailsParser;
+import core.model.match.MatchKurzInfo;
 import core.net.MyConnector;
 import core.util.HOLogger;
 import core.util.HelperWrapper;
@@ -18,10 +20,8 @@ import java.io.BufferedWriter;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.OutputStreamWriter;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
+import java.text.SimpleDateFormat;
+import java.util.*;
 
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
@@ -61,10 +61,22 @@ class NthrfConvertXml2Hrf {
 			NtPlayer trainer = NthrfUtil.getTrainer(players);
 			debug("Got " + ((players != null && players.getPlayerIds() != null) ? players.getPlayerIds().size() : "null") + " players and trainer");
 
+			// nt matches
+			GregorianCalendar cal = new GregorianCalendar();
+			cal.setTimeInMillis(System.currentTimeMillis());
+			xml = dh.getHattrickXMLFile("/chppxml.axd?file=matches&teamID=" + teamId + "&LastMatchDate=" + new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime()));
+			List<MatchKurzInfo> matches = XMLMatchArchivParser.parseMatchesFromString(xml);
+
 			// lineup
-			xml = dh.getHattrickXMLFile("/chppxml.axd?file=matchlineup&teamID=" + teamId);
-			NtLineupParser lineup = new NtLineupParser(xml);
-			debug("Got lineup");
+			NtLineupParser lineup = null;
+			if (matches.size() > 0) {
+				//System.out.println("<?file=matchlineup&version=2.0&matchID=646760425&teamID=3030");
+				//System.out.println(">?file=matchlineup&version=2.0&matchID=" + matches.get(matches.size() - 1).getMatchID() + "&teamID=" + teamId);
+
+				xml = dh.getHattrickXMLFile("/chppxml.axd?file=matchlineup&version=2.0&matchID=" + matches.get(matches.size() - 1).getMatchID() + "&teamID=" + teamId);
+				lineup = new NtLineupParser(xml);
+				debug("Got lineup");
+			}
 
 			createBasics(details, players); // ok, TODO
 			debug("created basics");
@@ -74,7 +86,8 @@ class NthrfConvertXml2Hrf {
 			debug("created club");
 			createTeam(details);			// ok
 			debug("created team details");
-			createLineUp(trainer, lineup);	// ok, TODO
+			if (lineup != null)
+				createLineUp(trainer, lineup);	// ok, TODO
 			debug("created lineup");
 			createEconomy(); 				// ok, TODO
 			debug("created economy");
@@ -84,7 +97,8 @@ class NthrfConvertXml2Hrf {
 			debug("created players");
 			createWorld(world, details, trainer);	// ok, TODO
 			debug("created world");
-			createLastLineUp(trainer, lineup);		//ok, TODO
+			if (lineup != null)
+				createLastLineUp(trainer, lineup);		//ok, TODO
 			debug("created last lineup");
 		} catch (Exception e) {
 			e.printStackTrace();
diff --git a/src/main/java/module/nthrf/NthrfUtil.java b/src/main/java/module/nthrf/NthrfUtil.java
index 59c1b7d..4d16268 100644
--- a/src/main/java/module/nthrf/NthrfUtil.java
+++ b/src/main/java/module/nthrf/NthrfUtil.java
@@ -15,6 +15,7 @@ import java.util.List;
 
 import javax.swing.JFileChooser;
 
+import core.util.HOLogger;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 
@@ -86,7 +87,9 @@ class NthrfUtil {
     public static List<String[]> getNtTeams() {
     	List<String[]> ret = new ArrayList<String[]>();
         try {
-            String xmldata = MyConnector.instance().getHattrickXMLFile("/chppxml.axd?file=team");
+            String xmldata = MyConnector.instance().getHattrickXMLFile("/chppxml.axd?file=teamdetails");
+
+            HOLogger.instance().error(null, "TRACE: xmldata:" + xmldata);
             final Document doc = XMLManager.parseString(xmldata);
             Element ele = null;
             Element root = null;
diff --git a/src/main/java/module/transfer/TransfersPanel.java b/src/main/java/module/transfer/TransfersPanel.java
index 1d955ef..33843a9 100644
--- a/src/main/java/module/transfer/TransfersPanel.java
+++ b/src/main/java/module/transfer/TransfersPanel.java
@@ -88,7 +88,7 @@ public class TransfersPanel extends JPanel implements IRefreshable {
 			}
 		}
 		boolean success = false;
-		if ((outdated.size() > 0) && (DBManager.instance().getTransfers(0, true, true).size() == 0)) {
+		if ((outdated.size() > 0) && !HOVerwaltung.instance().getModel().getBasics().isNationalTeam() &&  (DBManager.instance().getTransfers(0, true, true).size() == 0)) {
 			success = DBManager.instance().updateTeamTransfers(
 						HOVerwaltung.instance().getModel().getBasics().getTeamId());
 		}
diff --git a/src/main/java/module/transfer/history/HistoryPane.java b/src/main/java/module/transfer/history/HistoryPane.java
index 1682266..969cd1a 100644
--- a/src/main/java/module/transfer/history/HistoryPane.java
+++ b/src/main/java/module/transfer/history/HistoryPane.java
@@ -149,7 +149,7 @@ public class HistoryPane extends JSplitPane {
 
 				 HOVerwaltung hoV = HOVerwaltung.instance();
 				 int teamId = hoV.getModel().getBasics().getTeamId();
-	            if ( teamId != 0) {
+	            if ( teamId != 0 && !hoV.getModel().getBasics().isNationalTeam()) {
 	                final StringBuffer sBuffer = new StringBuffer();
 
 	                sBuffer.append(hoV.getLanguageString("UpdConfirmMsg.0"));
diff --git a/version.properties b/version.properties
index 55d0735..c0ae435 100644
--- a/version.properties
+++ b/version.properties
@@ -1,2 +1,2 @@
-#Mon Jun 10 16:58:19 CEST 2019
-buildNumber=1081
+#Wed Aug 07 21:07:21 CEST 2019
+buildNumber=1089
